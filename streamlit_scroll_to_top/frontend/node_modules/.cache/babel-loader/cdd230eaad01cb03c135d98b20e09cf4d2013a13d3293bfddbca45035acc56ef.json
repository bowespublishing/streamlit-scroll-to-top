{"ast":null,"code":"import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import{PDFDocument}from\"pdf-lib\";import{jsx as _jsx}from\"react/jsx-runtime\";class PDFComponent extends StreamlitComponentBase{constructor(){super(...arguments);this.isProcessing=false;// Guard to prevent double execution\nthis.lastProcessedImageList=null;this.lastProcessedSingleImage=null;this.render=()=>{const imageData=this.props.args[\"imageData\"];// For single image\nconst fileName=this.props.args[\"fileName\"]||\"output.pdf\";// Single image file name\nconst imageList=this.props.args[\"imageList\"];const dpi=this.props.args[\"dpi\"]||300;const pageSize=this.props.args[\"pageSize\"]||{width:8.5,height:11};const bleed=this.props.args[\"bleed\"]||false;// Single image handling\nif(imageData&&!this.isProcessing){if(imageData!==this.lastProcessedSingleImage){this.isProcessing=true;this.lastProcessedSingleImage=imageData;this.convertSingleImageToPdf(imageData,fileName,dpi,pageSize,bleed);}}// Multi-image handling\nelse if(imageList&&imageList.length>0&&!this.isProcessing){const serializedImageList=JSON.stringify(imageList);// Serialize to detect changes\nif(serializedImageList!==this.lastProcessedImageList){this.isProcessing=true;this.lastProcessedImageList=serializedImageList;this.convertImagesToSinglePdf(imageList,dpi,pageSize,bleed);}}return/*#__PURE__*/_jsx(\"div\",{});// Empty UI as there's no component to display\n};this.convertSingleImageToPdf=async(imageData,fileName,dpi,pageSize,bleed)=>{try{const pdfDoc=await PDFDocument.create();await this.addImageToPdf(pdfDoc,imageData,dpi,pageSize,bleed);const pdfBytes=await pdfDoc.save();this.triggerDownload(pdfBytes,fileName);Streamlit.setComponentValue(true);// Indicate success\n}catch(error){console.error(\"Error generating single PDF:\",error);Streamlit.setComponentValue(false);// Indicate failure\n}finally{this.isProcessing=false;// Reset guard\n}};this.convertImagesToSinglePdf=async(imageList,dpi,pageSize,bleed)=>{try{const pdfDoc=await PDFDocument.create();// Add all images to the PDF\nfor(const{imageData}of imageList){await this.addImageToPdf(pdfDoc,imageData,dpi,pageSize,bleed);}const pdfBytes=await pdfDoc.save();const fileName=this.props.args[\"outputFileName\"]||\"bulk_images.pdf\";// Trigger the download\nthis.triggerDownload(pdfBytes,fileName);Streamlit.setComponentValue(true);// Indicate success\n}catch(error){console.error(\"Error generating bulk PDF:\",error);Streamlit.setComponentValue(false);// Indicate failure\n}finally{this.isProcessing=false;// Reset guard\n}};this.addImageToPdf=async(pdfDoc,imageData,dpi,pageSize,bleed)=>{const imageBytes=Uint8Array.from(atob(imageData),c=>c.charCodeAt(0));const embeddedImage=await pdfDoc.embedPng(imageBytes);const pageWidthInPoints=pageSize.width*72;const pageHeightInPoints=pageSize.height*72;let scale,scaledWidth,scaledHeight,xOffset,yOffset;if(bleed){const widthRatio=pageWidthInPoints/embeddedImage.width;const heightRatio=pageHeightInPoints/embeddedImage.height;scale=Math.max(widthRatio,heightRatio);scaledWidth=embeddedImage.width*scale;scaledHeight=embeddedImage.height*scale;xOffset=(pageWidthInPoints-scaledWidth)/2;yOffset=(pageHeightInPoints-scaledHeight)/2;}else{const margin=0.75*72;const contentWidth=pageWidthInPoints-2*margin;const contentHeight=pageHeightInPoints-2*margin;const widthRatio=contentWidth/embeddedImage.width;const heightRatio=contentHeight/embeddedImage.height;scale=Math.min(widthRatio,heightRatio);scaledWidth=embeddedImage.width*scale;scaledHeight=embeddedImage.height*scale;xOffset=(contentWidth-scaledWidth)/2+margin;yOffset=(contentHeight-scaledHeight)/2+margin;}const page=pdfDoc.addPage([pageWidthInPoints,pageHeightInPoints]);page.drawImage(embeddedImage,{x:xOffset,y:yOffset,width:scaledWidth,height:scaledHeight});};this.triggerDownload=(pdfBytes,fileName)=>{const blob=new Blob([pdfBytes],{type:\"application/pdf\"});const url=URL.createObjectURL(blob);const link=document.createElement(\"a\");link.href=url;link.download=fileName;document.body.appendChild(link);link.click();document.body.removeChild(link);};}}export default withStreamlitConnection(PDFComponent);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","PDFDocument","jsx","_jsx","PDFComponent","constructor","arguments","isProcessing","lastProcessedImageList","lastProcessedSingleImage","render","imageData","props","args","fileName","imageList","dpi","pageSize","width","height","bleed","convertSingleImageToPdf","length","serializedImageList","JSON","stringify","convertImagesToSinglePdf","pdfDoc","create","addImageToPdf","pdfBytes","save","triggerDownload","setComponentValue","error","console","imageBytes","Uint8Array","from","atob","c","charCodeAt","embeddedImage","embedPng","pageWidthInPoints","pageHeightInPoints","scale","scaledWidth","scaledHeight","xOffset","yOffset","widthRatio","heightRatio","Math","max","margin","contentWidth","contentHeight","min","page","addPage","drawImage","x","y","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild"],"sources":["C:/Users/lukeb/Downloads/my_component/pdf_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\n\nclass PDFComponent extends StreamlitComponentBase {\n  private isProcessing: boolean = false; // Guard to prevent double execution\n  private lastProcessedImageList: string | null = null;\n  private lastProcessedSingleImage: string | null = null;\n\n  public render = (): ReactNode => {\n    const imageData = this.props.args[\"imageData\"] as string; // For single image\n    const fileName = this.props.args[\"fileName\"] || \"output.pdf\"; // Single image file name\n    const imageList = this.props.args[\"imageList\"] as Array<{ imageData: string; fileName: string }>;\n    const dpi = this.props.args[\"dpi\"] || 300;\n    const pageSize = this.props.args[\"pageSize\"] || { width: 8.5, height: 11 };\n    const bleed = this.props.args[\"bleed\"] || false;\n\n    // Single image handling\n    if (imageData && !this.isProcessing) {\n      if (imageData !== this.lastProcessedSingleImage) {\n        this.isProcessing = true;\n        this.lastProcessedSingleImage = imageData;\n        this.convertSingleImageToPdf(imageData, fileName, dpi, pageSize, bleed);\n      }\n    }\n    // Multi-image handling\n    else if (imageList && imageList.length > 0 && !this.isProcessing) {\n      const serializedImageList = JSON.stringify(imageList); // Serialize to detect changes\n      if (serializedImageList !== this.lastProcessedImageList) {\n        this.isProcessing = true;\n        this.lastProcessedImageList = serializedImageList;\n        this.convertImagesToSinglePdf(imageList, dpi, pageSize, bleed);\n      }\n    }\n\n    return <div></div>; // Empty UI as there's no component to display\n  };\n\n  private convertSingleImageToPdf = async (\n    imageData: string,\n    fileName: string,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean\n  ): Promise<void> => {\n    try {\n      const pdfDoc = await PDFDocument.create();\n      await this.addImageToPdf(pdfDoc, imageData, dpi, pageSize, bleed);\n\n      const pdfBytes = await pdfDoc.save();\n      this.triggerDownload(pdfBytes, fileName);\n\n      Streamlit.setComponentValue(true); // Indicate success\n    } catch (error) {\n      console.error(\"Error generating single PDF:\", error);\n      Streamlit.setComponentValue(false); // Indicate failure\n    } finally {\n      this.isProcessing = false; // Reset guard\n    }\n  };\n\n  private convertImagesToSinglePdf = async (\n    imageList: Array<{ imageData: string; fileName: string }>,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean\n  ): Promise<void> => {\n    try {\n      const pdfDoc = await PDFDocument.create();\n\n      // Add all images to the PDF\n      for (const { imageData } of imageList) {\n        await this.addImageToPdf(pdfDoc, imageData, dpi, pageSize, bleed);\n      }\n\n      const pdfBytes = await pdfDoc.save();\n      const fileName = this.props.args[\"outputFileName\"] || \"bulk_images.pdf\";\n\n      // Trigger the download\n      this.triggerDownload(pdfBytes, fileName);\n\n      Streamlit.setComponentValue(true); // Indicate success\n    } catch (error) {\n      console.error(\"Error generating bulk PDF:\", error);\n      Streamlit.setComponentValue(false); // Indicate failure\n    } finally {\n      this.isProcessing = false; // Reset guard\n    }\n  };\n\n  private addImageToPdf = async (\n    pdfDoc: PDFDocument,\n    imageData: string,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean\n  ): Promise<void> => {\n    const imageBytes = Uint8Array.from(atob(imageData), (c) => c.charCodeAt(0));\n    const embeddedImage = await pdfDoc.embedPng(imageBytes);\n\n    const pageWidthInPoints = pageSize.width * 72;\n    const pageHeightInPoints = pageSize.height * 72;\n\n    let scale, scaledWidth, scaledHeight, xOffset, yOffset;\n\n    if (bleed) {\n      const widthRatio = pageWidthInPoints / embeddedImage.width;\n      const heightRatio = pageHeightInPoints / embeddedImage.height;\n      scale = Math.max(widthRatio, heightRatio);\n      scaledWidth = embeddedImage.width * scale;\n      scaledHeight = embeddedImage.height * scale;\n      xOffset = (pageWidthInPoints - scaledWidth) / 2;\n      yOffset = (pageHeightInPoints - scaledHeight) / 2;\n    } else {\n      const margin = 0.75 * 72;\n      const contentWidth = pageWidthInPoints - 2 * margin;\n      const contentHeight = pageHeightInPoints - 2 * margin;\n\n      const widthRatio = contentWidth / embeddedImage.width;\n      const heightRatio = contentHeight / embeddedImage.height;\n      scale = Math.min(widthRatio, heightRatio);\n      scaledWidth = embeddedImage.width * scale;\n      scaledHeight = embeddedImage.height * scale;\n      xOffset = (contentWidth - scaledWidth) / 2 + margin;\n      yOffset = (contentHeight - scaledHeight) / 2 + margin;\n    }\n\n    const page = pdfDoc.addPage([pageWidthInPoints, pageHeightInPoints]);\n    page.drawImage(embeddedImage, {\n      x: xOffset,\n      y: yOffset,\n      width: scaledWidth,\n      height: scaledHeight,\n    });\n  };\n\n  private triggerDownload = (pdfBytes: Uint8Array, fileName: string): void => {\n    const blob = new Blob([pdfBytes], { type: \"application/pdf\" });\n    const url = URL.createObjectURL(blob);\n\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = fileName;\n    document.body.appendChild(link);\n\n    link.click();\n    document.body.removeChild(link);\n  };\n}\n\nexport default withStreamlitConnection(PDFComponent);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}