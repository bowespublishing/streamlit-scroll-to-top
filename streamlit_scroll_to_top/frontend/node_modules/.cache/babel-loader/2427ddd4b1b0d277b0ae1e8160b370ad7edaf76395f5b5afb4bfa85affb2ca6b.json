{"ast":null,"code":"import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import JSZip from\"jszip\";import{PDFDocument}from\"pdf-lib\";// Import pdf-lib for PDF creation\nimport{jsx as _jsx}from\"react/jsx-runtime\";class PDFComponent extends StreamlitComponentBase{constructor(){super(...arguments);this.isProcessing=false;// Guard to prevent double execution\nthis.lastProcessedImageData=null;// Store the last processed image data\nthis.lastProcessedFileName=null;this.render=()=>{// Retrieve the data from the props\nconst imageData=this.props.args[\"imageData\"];const fileName=this.props.args[\"fileName\"]||\"output.pdf\";const imageList=this.props.args[\"imageList\"];const dpi=this.props.args[\"dpi\"]||300;// DPI value\nconst pageSize=this.props.args[\"pageSize\"]||{width:8.5,height:11};// Page size in inches\n// Handle single or batch processing\nif(!this.isProcessing){if(imageData){// Check if the input is the same as the last processed one\nif(imageData!==this.lastProcessedImageData||fileName!==this.lastProcessedFileName){this.isProcessing=true;this.lastProcessedImageData=imageData;// Update the last processed image data\nthis.lastProcessedFileName=fileName;// Update the last processed file name\nthis.convertSingleImageToPdf(imageData,fileName,dpi,pageSize);}}else if(imageList&&imageList.length>0){this.isProcessing=true;this.convertImagesToPdfAndDownload(imageList,dpi,pageSize);}}// Return an empty div or nothing if no message needs to be displayed\nreturn/*#__PURE__*/_jsx(\"div\",{});};this.convertSingleImageToPdf=async(imageData,fileName,dpi,pageSize)=>{try{const pdfDoc=await PDFDocument.create();const imageBytes=this.base64ToUint8Array(imageData);const embeddedImage=await pdfDoc.embedPng(imageBytes);// Embed the image (supports PNG or JPG)\n// Page size in points\nconst pageWidthInPoints=pageSize.width*72;const pageHeightInPoints=pageSize.height*72;// Original image dimensions\nconst originalWidth=embeddedImage.width;const originalHeight=embeddedImage.height;// Calculate image dimensions in points based on DPI\nconst imageWidthInPoints=originalWidth/dpi*72;const imageHeightInPoints=originalHeight/dpi*72;// Add a page with the specified dimensions\nconst page=pdfDoc.addPage([pageWidthInPoints,pageHeightInPoints]);// Center the image on the page\nconst xOffset=(pageWidthInPoints-imageWidthInPoints)/2;const yOffset=(pageHeightInPoints-imageHeightInPoints)/2;page.drawImage(embeddedImage,{x:xOffset,y:yOffset,width:imageWidthInPoints,height:imageHeightInPoints});const pdfBytes=await pdfDoc.save();const blob=new Blob([pdfBytes],{type:\"application/pdf\"});const url=URL.createObjectURL(blob);const link=document.createElement(\"a\");link.href=url;link.download=fileName;document.body.appendChild(link);link.click();// Immediate download for single PDF\ndocument.body.removeChild(link);Streamlit.setComponentValue(true);// Indicate success\n}catch(error){console.error(\"Error generating PDF:\",error);Streamlit.setComponentValue(false);// Indicate failure\n}finally{this.isProcessing=false;// Reset processing flag\n}};this.convertImagesToPdfAndDownload=async(imageList,dpi,pageSize)=>{try{const zip=new JSZip();const pdfPromises=imageList.map(async _ref=>{let{imageData,fileName}=_ref;const pdfDoc=await PDFDocument.create();const imageBytes=this.base64ToUint8Array(imageData);const embeddedImage=await pdfDoc.embedPng(imageBytes);// Page size in points\nconst pageWidthInPoints=pageSize.width*72;const pageHeightInPoints=pageSize.height*72;// Original image dimensions\nconst originalWidth=embeddedImage.width;const originalHeight=embeddedImage.height;// Calculate image dimensions in points based on DPI\nconst imageWidthInPoints=originalWidth/dpi*72;const imageHeightInPoints=originalHeight/dpi*72;// Add a page with the specified dimensions\nconst page=pdfDoc.addPage([pageWidthInPoints,pageHeightInPoints]);// Center the image on the page\nconst xOffset=(pageWidthInPoints-imageWidthInPoints)/2;const yOffset=(pageHeightInPoints-imageHeightInPoints)/2;page.drawImage(embeddedImage,{x:xOffset,y:yOffset,width:imageWidthInPoints,height:imageHeightInPoints});const pdfBytes=await pdfDoc.save();zip.file(`${fileName}.pdf`,pdfBytes);// Add PDF to ZIP\n});await Promise.all(pdfPromises);const zipFile=await zip.generateAsync({type:\"blob\"});const link=document.createElement(\"a\");link.href=URL.createObjectURL(zipFile);link.download=\"images.zip\";document.body.appendChild(link);link.click();// Download ZIP\ndocument.body.removeChild(link);Streamlit.setComponentValue(true);// Indicate success\n}catch(error){console.error(\"Error generating ZIP file:\",error);Streamlit.setComponentValue(false);// Indicate failure\n}finally{this.isProcessing=false;// Reset processing flag\n}};}// Store the last processed file name\n// Utility function to convert base64 to Uint8Array\nbase64ToUint8Array(base64){const binaryString=atob(base64);const length=binaryString.length;const bytes=new Uint8Array(length);for(let i=0;i<length;i++){bytes[i]=binaryString.charCodeAt(i);}return bytes;}}// Export the component\nexport default withStreamlitConnection(PDFComponent);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","JSZip","PDFDocument","jsx","_jsx","PDFComponent","constructor","arguments","isProcessing","lastProcessedImageData","lastProcessedFileName","render","imageData","props","args","fileName","imageList","dpi","pageSize","width","height","convertSingleImageToPdf","length","convertImagesToPdfAndDownload","pdfDoc","create","imageBytes","base64ToUint8Array","embeddedImage","embedPng","pageWidthInPoints","pageHeightInPoints","originalWidth","originalHeight","imageWidthInPoints","imageHeightInPoints","page","addPage","xOffset","yOffset","drawImage","x","y","pdfBytes","save","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","setComponentValue","error","console","zip","pdfPromises","map","_ref","file","Promise","all","zipFile","generateAsync","base64","binaryString","atob","bytes","Uint8Array","i","charCodeAt"],"sources":["C:/Users/lukeb/Downloads/my_component/pdf_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport JSZip from \"jszip\";\nimport { PDFDocument } from \"pdf-lib\"; // Import pdf-lib for PDF creation\n\nclass PDFComponent extends StreamlitComponentBase {\n  private isProcessing: boolean = false; // Guard to prevent double execution\n  private lastProcessedImageData: string | null = null; // Store the last processed image data\n  private lastProcessedFileName: string | null = null; // Store the last processed file name\n\n  // Utility function to convert base64 to Uint8Array\n  private base64ToUint8Array(base64: string): Uint8Array {\n    const binaryString = atob(base64);\n    const length = binaryString.length;\n    const bytes = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes;\n  }\n\n  public render = (): ReactNode => {\n    // Retrieve the data from the props\n    const imageData = this.props.args[\"imageData\"] as string;\n    const fileName = this.props.args[\"fileName\"] || \"output.pdf\";\n    const imageList = this.props.args[\"imageList\"] as Array<{ imageData: string; fileName: string }>;\n    const dpi = this.props.args[\"dpi\"] || 300; // DPI value\n    const pageSize = this.props.args[\"pageSize\"] || { width: 8.5, height: 11 }; // Page size in inches\n\n    // Handle single or batch processing\n    if (!this.isProcessing) {\n      if (imageData) {\n        // Check if the input is the same as the last processed one\n        if (imageData !== this.lastProcessedImageData || fileName !== this.lastProcessedFileName) {\n          this.isProcessing = true;\n          this.lastProcessedImageData = imageData; // Update the last processed image data\n          this.lastProcessedFileName = fileName; // Update the last processed file name\n          this.convertSingleImageToPdf(imageData, fileName, dpi, pageSize);\n        }\n      } else if (imageList && imageList.length > 0) {\n        this.isProcessing = true;\n        this.convertImagesToPdfAndDownload(imageList, dpi, pageSize);\n      }\n    }\n\n    // Return an empty div or nothing if no message needs to be displayed\n    return <div></div>;\n  };\n\n  private convertSingleImageToPdf = async (\n    imageData: string,\n    fileName: string,\n    dpi: number,\n    pageSize: { width: number; height: number }\n  ): Promise<void> => {\n    try {\n      const pdfDoc = await PDFDocument.create();\n      const imageBytes = this.base64ToUint8Array(imageData);\n      const embeddedImage = await pdfDoc.embedPng(imageBytes); // Embed the image (supports PNG or JPG)\n\n      // Page size in points\n      const pageWidthInPoints = pageSize.width * 72;\n      const pageHeightInPoints = pageSize.height * 72;\n\n      // Original image dimensions\n      const originalWidth = embeddedImage.width;\n      const originalHeight = embeddedImage.height;\n\n      // Calculate image dimensions in points based on DPI\n      const imageWidthInPoints = (originalWidth / dpi) * 72;\n      const imageHeightInPoints = (originalHeight / dpi) * 72;\n\n      // Add a page with the specified dimensions\n      const page = pdfDoc.addPage([pageWidthInPoints, pageHeightInPoints]);\n\n      // Center the image on the page\n      const xOffset = (pageWidthInPoints - imageWidthInPoints) / 2;\n      const yOffset = (pageHeightInPoints - imageHeightInPoints) / 2;\n\n      page.drawImage(embeddedImage, {\n        x: xOffset,\n        y: yOffset,\n        width: imageWidthInPoints,\n        height: imageHeightInPoints,\n      });\n\n      const pdfBytes = await pdfDoc.save();\n      const blob = new Blob([pdfBytes], { type: \"application/pdf\" });\n      const url = URL.createObjectURL(blob);\n\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = fileName;\n      document.body.appendChild(link);\n\n      link.click(); // Immediate download for single PDF\n      document.body.removeChild(link);\n\n      Streamlit.setComponentValue(true); // Indicate success\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      Streamlit.setComponentValue(false); // Indicate failure\n    } finally {\n      this.isProcessing = false; // Reset processing flag\n    }\n  };\n\n  private convertImagesToPdfAndDownload = async (\n    imageList: Array<{ imageData: string; fileName: string }>,\n    dpi: number,\n    pageSize: { width: number; height: number }\n  ): Promise<void> => {\n    try {\n      const zip = new JSZip();\n\n      const pdfPromises = imageList.map(async ({ imageData, fileName }) => {\n        const pdfDoc = await PDFDocument.create();\n        const imageBytes = this.base64ToUint8Array(imageData);\n        const embeddedImage = await pdfDoc.embedPng(imageBytes);\n\n        // Page size in points\n        const pageWidthInPoints = pageSize.width * 72;\n        const pageHeightInPoints = pageSize.height * 72;\n\n        // Original image dimensions\n        const originalWidth = embeddedImage.width;\n        const originalHeight = embeddedImage.height;\n\n        // Calculate image dimensions in points based on DPI\n        const imageWidthInPoints = (originalWidth / dpi) * 72;\n        const imageHeightInPoints = (originalHeight / dpi) * 72;\n\n        // Add a page with the specified dimensions\n        const page = pdfDoc.addPage([pageWidthInPoints, pageHeightInPoints]);\n\n        // Center the image on the page\n        const xOffset = (pageWidthInPoints - imageWidthInPoints) / 2;\n        const yOffset = (pageHeightInPoints - imageHeightInPoints) / 2;\n\n        page.drawImage(embeddedImage, {\n          x: xOffset,\n          y: yOffset,\n          width: imageWidthInPoints,\n          height: imageHeightInPoints,\n        });\n\n        const pdfBytes = await pdfDoc.save();\n        zip.file(`${fileName}.pdf`, pdfBytes); // Add PDF to ZIP\n      });\n\n      await Promise.all(pdfPromises);\n      const zipFile = await zip.generateAsync({ type: \"blob\" });\n\n      const link = document.createElement(\"a\");\n      link.href = URL.createObjectURL(zipFile);\n      link.download = \"images.zip\";\n      document.body.appendChild(link);\n\n      link.click(); // Download ZIP\n      document.body.removeChild(link);\n\n      Streamlit.setComponentValue(true); // Indicate success\n    } catch (error) {\n      console.error(\"Error generating ZIP file:\", error);\n      Streamlit.setComponentValue(false); // Indicate failure\n    } finally {\n      this.isProcessing = false; // Reset processing flag\n    }\n  };\n}\n\n// Export the component\nexport default withStreamlitConnection(PDFComponent);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}