{"ast":null,"code":"import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import{PDFDocument}from\"pdf-lib\";class JPEGtoPDFComponent extends StreamlitComponentBase{constructor(){super(...arguments);this.lastProcessedImageList=null;this.render=()=>{const args=this.props.args;const imageList=args.imageList;const outputFileName=args.outputFileName||\"output.pdf\";if(imageList&&imageList.length>0){const serializedImageList=JSON.stringify(imageList);if(serializedImageList!==this.lastProcessedImageList){this.lastProcessedImageList=serializedImageList;this.convertImagesToPdf(imageList,outputFileName);}}return null;// No UI elements displayed\n};this.convertImagesToPdf=async(imageList,outputFileName)=>{try{const pdfDoc=await PDFDocument.create();for(const{imageData}of imageList){await this.addJpegToPdf(pdfDoc,imageData);}const pdfBytes=await pdfDoc.save();this.triggerDownload(pdfBytes,outputFileName);Streamlit.setComponentValue(true);}catch(error){console.error(\"Error generating PDF:\",error);Streamlit.setComponentValue(false);}};this.addJpegToPdf=async(pdfDoc,imageData)=>{const imageBytes=Uint8Array.from(atob(imageData),c=>c.charCodeAt(0));const embeddedImage=await pdfDoc.embedJpg(imageBytes);// Convert image dimensions to points (assume 300 DPI)\nconst pageWidth=embeddedImage.width/300*72;const pageHeight=embeddedImage.height/300*72;const page=pdfDoc.addPage([pageWidth,pageHeight]);page.drawImage(embeddedImage,{x:0,y:0,width:pageWidth,height:pageHeight});};this.triggerDownload=(pdfBytes,fileName)=>{const blob=new Blob([pdfBytes],{type:\"application/pdf\"});const url=URL.createObjectURL(blob);const link=document.createElement(\"a\");link.href=url;link.download=fileName;document.body.appendChild(link);link.click();document.body.removeChild(link);};}}export default withStreamlitConnection(JPEGtoPDFComponent);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","PDFDocument","JPEGtoPDFComponent","constructor","arguments","lastProcessedImageList","render","args","props","imageList","outputFileName","length","serializedImageList","JSON","stringify","convertImagesToPdf","pdfDoc","create","imageData","addJpegToPdf","pdfBytes","save","triggerDownload","setComponentValue","error","console","imageBytes","Uint8Array","from","atob","c","charCodeAt","embeddedImage","embedJpg","pageWidth","width","pageHeight","height","page","addPage","drawImage","x","y","fileName","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild"],"sources":["C:/Users/lukeb/Downloads/my_component/pdf_download/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\n\ninterface Args {\n  imageList?: Array<{ imageData: string; fileName: string }>;\n  outputFileName?: string;\n}\n\nclass JPEGtoPDFComponent extends StreamlitComponentBase {\n  private lastProcessedImageList: string | null = null;\n\n  public render = (): ReactNode => {\n    const args = this.props.args as Args;\n    const imageList = args.imageList;\n    const outputFileName = args.outputFileName || \"output.pdf\";\n\n    if (imageList && imageList.length > 0) {\n      const serializedImageList = JSON.stringify(imageList);\n      if (serializedImageList !== this.lastProcessedImageList) {\n        this.lastProcessedImageList = serializedImageList;\n        this.convertImagesToPdf(imageList, outputFileName);\n      }\n    }\n\n    return null; // No UI elements displayed\n  };\n\n  private convertImagesToPdf = async (\n    imageList: Array<{ imageData: string; fileName: string }>,\n    outputFileName: string\n  ): Promise<void> => {\n    try {\n      const pdfDoc = await PDFDocument.create();\n\n      for (const { imageData } of imageList) {\n        await this.addJpegToPdf(pdfDoc, imageData);\n      }\n\n      const pdfBytes = await pdfDoc.save();\n      this.triggerDownload(pdfBytes, outputFileName);\n      Streamlit.setComponentValue(true);\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      Streamlit.setComponentValue(false);\n    }\n  };\n\n  private addJpegToPdf = async (pdfDoc: PDFDocument, imageData: string): Promise<void> => {\n    const imageBytes = Uint8Array.from(atob(imageData), (c) => c.charCodeAt(0));\n    const embeddedImage = await pdfDoc.embedJpg(imageBytes);\n\n    // Convert image dimensions to points (assume 300 DPI)\n    const pageWidth = (embeddedImage.width / 300) * 72;\n    const pageHeight = (embeddedImage.height / 300) * 72;\n\n    const page = pdfDoc.addPage([pageWidth, pageHeight]);\n    page.drawImage(embeddedImage, {\n      x: 0,\n      y: 0,\n      width: pageWidth,\n      height: pageHeight,\n    });\n  };\n\n  private triggerDownload = (pdfBytes: Uint8Array, fileName: string): void => {\n    const blob = new Blob([pdfBytes], { type: \"application/pdf\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = fileName;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n}\n\nexport default withStreamlitConnection(JPEGtoPDFComponent);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}