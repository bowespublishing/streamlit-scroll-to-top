{"ast":null,"code":"import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import{PDFDocument}from\"pdf-lib\";import{jsx as _jsx}from\"react/jsx-runtime\";class PDFComponent extends StreamlitComponentBase{constructor(){super(...arguments);this.isProcessing=false;this.lastProcessedImageData=null;this.lastProcessedFileName=null;this.render=()=>{const imageData=this.props.args[\"imageData\"];const fileName=this.props.args[\"fileName\"]||\"output.pdf\";const imageList=this.props.args[\"imageList\"];const dpi=this.props.args[\"dpi\"]||300;const pageSize=this.props.args[\"pageSize\"]||{width:8.5,height:11};if(!this.isProcessing){if(imageData){if(imageData!==this.lastProcessedImageData||fileName!==this.lastProcessedFileName){this.isProcessing=true;this.lastProcessedImageData=imageData;this.lastProcessedFileName=fileName;this.convertSingleImageToPdf(imageData,fileName,dpi,pageSize);}}else if(imageList&&imageList.length>0){this.isProcessing=true;this.convertImagesToSinglePdf(imageList,dpi,pageSize);}}return/*#__PURE__*/_jsx(\"div\",{});};this.convertSingleImageToPdf=async(imageData,fileName,dpi,pageSize)=>{try{const pdfDoc=await PDFDocument.create();await this.addImageToPdf(pdfDoc,imageData,dpi,pageSize);const pdfBytes=await pdfDoc.save();const blob=new Blob([pdfBytes],{type:\"application/pdf\"});const url=URL.createObjectURL(blob);const link=document.createElement(\"a\");link.href=url;link.download=fileName;document.body.appendChild(link);link.click();document.body.removeChild(link);Streamlit.setComponentValue(true);}catch(error){console.error(\"Error generating PDF:\",error);Streamlit.setComponentValue(false);}finally{this.isProcessing=false;}};this.convertImagesToSinglePdf=async(imageList,dpi,pageSize)=>{try{const pdfDoc=await PDFDocument.create();for(const{imageData}of imageList){await this.addImageToPdf(pdfDoc,imageData,dpi,pageSize);}const pdfBytes=await pdfDoc.save();const blob=new Blob([pdfBytes],{type:\"application/pdf\"});const url=URL.createObjectURL(blob);const link=document.createElement(\"a\");link.href=url;link.download=\"bulk_images.pdf\";document.body.appendChild(link);link.click();document.body.removeChild(link);Streamlit.setComponentValue(true);}catch(error){console.error(\"Error generating single PDF:\",error);Streamlit.setComponentValue(false);}finally{this.isProcessing=false;}};this.addImageToPdf=async(pdfDoc,imageData,dpi,pageSize)=>{const imageBytes=this.base64ToUint8Array(imageData);const embeddedImage=await pdfDoc.embedPng(imageBytes);const pageWidthInPoints=pageSize.width*72;const pageHeightInPoints=pageSize.height*72;const originalWidth=embeddedImage.width;const originalHeight=embeddedImage.height;// Calculate scaled dimensions while maintaining aspect ratio\nconst widthRatio=pageWidthInPoints/originalWidth;const heightRatio=pageHeightInPoints/originalHeight;const scale=Math.min(widthRatio,heightRatio);const scaledWidth=originalWidth*scale;const scaledHeight=originalHeight*scale;const xOffset=(pageWidthInPoints-scaledWidth)/2;const yOffset=(pageHeightInPoints-scaledHeight)/2;const page=pdfDoc.addPage([pageWidthInPoints,pageHeightInPoints]);page.drawImage(embeddedImage,{x:xOffset,y:yOffset,width:scaledWidth,height:scaledHeight});};}base64ToUint8Array(base64){const binaryString=atob(base64);const length=binaryString.length;const bytes=new Uint8Array(length);for(let i=0;i<length;i++){bytes[i]=binaryString.charCodeAt(i);}return bytes;}}export default withStreamlitConnection(PDFComponent);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","PDFDocument","jsx","_jsx","PDFComponent","constructor","arguments","isProcessing","lastProcessedImageData","lastProcessedFileName","render","imageData","props","args","fileName","imageList","dpi","pageSize","width","height","convertSingleImageToPdf","length","convertImagesToSinglePdf","pdfDoc","create","addImageToPdf","pdfBytes","save","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","setComponentValue","error","console","imageBytes","base64ToUint8Array","embeddedImage","embedPng","pageWidthInPoints","pageHeightInPoints","originalWidth","originalHeight","widthRatio","heightRatio","scale","Math","min","scaledWidth","scaledHeight","xOffset","yOffset","page","addPage","drawImage","x","y","base64","binaryString","atob","bytes","Uint8Array","i","charCodeAt"],"sources":["C:/Users/lukeb/Downloads/my_component/pdf_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\nimport JSZip from \"jszip\";\n\nclass PDFComponent extends StreamlitComponentBase {\n  private isProcessing: boolean = false;\n  private lastProcessedImageData: string | null = null;\n  private lastProcessedFileName: string | null = null;\n\n  private base64ToUint8Array(base64: string): Uint8Array {\n    const binaryString = atob(base64);\n    const length = binaryString.length;\n    const bytes = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes;\n  }\n\n  public render = (): ReactNode => {\n    const imageData = this.props.args[\"imageData\"] as string;\n    const fileName = this.props.args[\"fileName\"] || \"output.pdf\";\n    const imageList = this.props.args[\"imageList\"] as Array<{ imageData: string; fileName: string }>;\n    const dpi = this.props.args[\"dpi\"] || 300;\n    const pageSize = this.props.args[\"pageSize\"] || { width: 8.5, height: 11 };\n\n    if (!this.isProcessing) {\n      if (imageData) {\n        if (imageData !== this.lastProcessedImageData || fileName !== this.lastProcessedFileName) {\n          this.isProcessing = true;\n          this.lastProcessedImageData = imageData;\n          this.lastProcessedFileName = fileName;\n          this.convertSingleImageToPdf(imageData, fileName, dpi, pageSize);\n        }\n      } else if (imageList && imageList.length > 0) {\n        this.isProcessing = true;\n        this.convertImagesToSinglePdf(imageList, dpi, pageSize);\n      }\n    }\n\n    return <div></div>;\n  };\n\n  private convertSingleImageToPdf = async (\n    imageData: string,\n    fileName: string,\n    dpi: number,\n    pageSize: { width: number; height: number }\n  ): Promise<void> => {\n    try {\n      const pdfDoc = await PDFDocument.create();\n      await this.addImageToPdf(pdfDoc, imageData, dpi, pageSize);\n\n      const pdfBytes = await pdfDoc.save();\n      const blob = new Blob([pdfBytes], { type: \"application/pdf\" });\n      const url = URL.createObjectURL(blob);\n\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = fileName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      Streamlit.setComponentValue(true);\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      Streamlit.setComponentValue(false);\n    } finally {\n      this.isProcessing = false;\n    }\n  };\n\n  private convertImagesToSinglePdf = async (\n    imageList: Array<{ imageData: string; fileName: string }>,\n    dpi: number,\n    pageSize: { width: number; height: number }\n  ): Promise<void> => {\n    try {\n      const pdfDoc = await PDFDocument.create();\n\n      for (const { imageData } of imageList) {\n        await this.addImageToPdf(pdfDoc, imageData, dpi, pageSize);\n      }\n\n      const pdfBytes = await pdfDoc.save();\n      const blob = new Blob([pdfBytes], { type: \"application/pdf\" });\n      const url = URL.createObjectURL(blob);\n\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = \"bulk_images.pdf\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      Streamlit.setComponentValue(true);\n    } catch (error) {\n      console.error(\"Error generating single PDF:\", error);\n      Streamlit.setComponentValue(false);\n    } finally {\n      this.isProcessing = false;\n    }\n  };\n\n  private addImageToPdf = async (\n    pdfDoc: PDFDocument,\n    imageData: string,\n    dpi: number,\n    pageSize: { width: number; height: number }\n  ): Promise<void> => {\n    const imageBytes = this.base64ToUint8Array(imageData);\n    const embeddedImage = await pdfDoc.embedPng(imageBytes);\n\n    const pageWidthInPoints = pageSize.width * 72;\n    const pageHeightInPoints = pageSize.height * 72;\n\n    const originalWidth = embeddedImage.width;\n    const originalHeight = embeddedImage.height;\n\n    // Calculate scaled dimensions while maintaining aspect ratio\n    const widthRatio = pageWidthInPoints / originalWidth;\n    const heightRatio = pageHeightInPoints / originalHeight;\n    const scale = Math.min(widthRatio, heightRatio);\n\n    const scaledWidth = originalWidth * scale;\n    const scaledHeight = originalHeight * scale;\n\n    const xOffset = (pageWidthInPoints - scaledWidth) / 2;\n    const yOffset = (pageHeightInPoints - scaledHeight) / 2;\n\n    const page = pdfDoc.addPage([pageWidthInPoints, pageHeightInPoints]);\n    page.drawImage(embeddedImage, {\n      x: xOffset,\n      y: yOffset,\n      width: scaledWidth,\n      height: scaledHeight,\n    });\n  };\n}\n\nexport default withStreamlitConnection(PDFComponent);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}