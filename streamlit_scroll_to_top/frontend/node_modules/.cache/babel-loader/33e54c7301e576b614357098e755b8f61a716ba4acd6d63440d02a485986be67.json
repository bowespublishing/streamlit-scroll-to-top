{"ast":null,"code":"import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import{PDFDocument}from\"pdf-lib\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";class PDFComponent extends StreamlitComponentBase{constructor(props){super(props);this.lastProcessedImageList=null;this.lastProcessedSingleImage=null;this.render=()=>{const imageData=this.props.args[\"imageData\"];// For single image\nconst fileName=this.props.args[\"fileName\"]||\"output.pdf\";// Single image file name\nconst imageList=this.props.args[\"imageList\"];const dpi=this.props.args[\"dpi\"]||300;const pageSize=this.props.args[\"pageSize\"]||{width:8.5,height:11};const bleed=this.props.args[\"bleed\"]||false;// Start processing only if not already processing\nif(!this.state.isProcessing){if(imageData){if(imageData!==this.lastProcessedSingleImage){this.lastProcessedSingleImage=imageData;this.setState({isProcessing:true,totalPages:1,processedPages:0},()=>{this.convertSingleImageToPdf(imageData,fileName,dpi,pageSize,bleed);});}}else if(imageList&&imageList.length>0){const serializedImageList=JSON.stringify(imageList);if(serializedImageList!==this.lastProcessedImageList){this.lastProcessedImageList=serializedImageList;this.setState({isProcessing:true,totalPages:imageList.length,processedPages:0},()=>{this.convertImagesToSinglePdf(imageList,dpi,pageSize,bleed);});}}}// Render the progress bar and message if processing\nreturn/*#__PURE__*/_jsx(\"div\",{children:this.state.isProcessing&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"progress\",{value:this.state.processedPages,max:this.state.totalPages,style:{width:\"100%\"}}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Currently processing page \",this.state.processedPages,\" of \",this.state.totalPages]})]})});};this.convertSingleImageToPdf=async(imageData,fileName,dpi,pageSize,bleed)=>{try{const pdfDoc=await PDFDocument.create();await this.addImageToPdf(pdfDoc,imageData,dpi,pageSize,bleed);this.setState({processedPages:1});// Update progress\nconst pdfBytes=await pdfDoc.save();this.triggerDownload(pdfBytes,fileName);Streamlit.setComponentValue(true);// Indicate success\n}catch(error){console.error(\"Error generating single PDF:\",error);Streamlit.setComponentValue(false);// Indicate failure\n}finally{this.setState({isProcessing:false});// Reset processing flag\n}};this.convertImagesToSinglePdf=async(imageList,dpi,pageSize,bleed)=>{try{const pdfDoc=await PDFDocument.create();for(let index=0;index<imageList.length;index++){const{imageData}=imageList[index];await this.addImageToPdf(pdfDoc,imageData,dpi,pageSize,bleed);// Update progress\nthis.setState(prevState=>({processedPages:prevState.processedPages+1}));}const pdfBytes=await pdfDoc.save();const fileName=this.props.args[\"outputFileName\"]||\"bulk_images.pdf\";this.triggerDownload(pdfBytes,fileName);Streamlit.setComponentValue(true);// Indicate success\n}catch(error){console.error(\"Error generating bulk PDF:\",error);Streamlit.setComponentValue(false);// Indicate failure\n}finally{this.setState({isProcessing:false});// Reset processing flag\n}};this.addImageToPdf=async(pdfDoc,imageData,dpi,pageSize,bleed)=>{const imageBytes=Uint8Array.from(atob(imageData),c=>c.charCodeAt(0));const embeddedImage=await pdfDoc.embedPng(imageBytes);const pageWidthInPoints=pageSize.width*72;const pageHeightInPoints=pageSize.height*72;let scale,scaledWidth,scaledHeight,xOffset,yOffset;if(bleed){const widthRatio=pageWidthInPoints/embeddedImage.width;const heightRatio=pageHeightInPoints/embeddedImage.height;scale=Math.max(widthRatio,heightRatio);scaledWidth=embeddedImage.width*scale;scaledHeight=embeddedImage.height*scale;xOffset=(pageWidthInPoints-scaledWidth)/2;yOffset=(pageHeightInPoints-scaledHeight)/2;}else{const margin=0.75*72;const contentWidth=pageWidthInPoints-2*margin;const contentHeight=pageHeightInPoints-2*margin;const widthRatio=contentWidth/embeddedImage.width;const heightRatio=contentHeight/embeddedImage.height;scale=Math.min(widthRatio,heightRatio);scaledWidth=embeddedImage.width*scale;scaledHeight=embeddedImage.height*scale;xOffset=(contentWidth-scaledWidth)/2+margin;yOffset=(contentHeight-scaledHeight)/2+margin;}const page=pdfDoc.addPage([pageWidthInPoints,pageHeightInPoints]);page.drawImage(embeddedImage,{x:xOffset,y:yOffset,width:scaledWidth,height:scaledHeight});};this.triggerDownload=(pdfBytes,fileName)=>{const blob=new Blob([pdfBytes],{type:\"application/pdf\"});const url=URL.createObjectURL(blob);const link=document.createElement(\"a\");link.href=url;link.download=fileName;document.body.appendChild(link);link.click();document.body.removeChild(link);};this.state={isProcessing:false,totalPages:0,processedPages:0};}}export default withStreamlitConnection(PDFComponent);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","PDFDocument","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PDFComponent","constructor","props","lastProcessedImageList","lastProcessedSingleImage","render","imageData","args","fileName","imageList","dpi","pageSize","width","height","bleed","state","isProcessing","setState","totalPages","processedPages","convertSingleImageToPdf","length","serializedImageList","JSON","stringify","convertImagesToSinglePdf","children","value","max","style","pdfDoc","create","addImageToPdf","pdfBytes","save","triggerDownload","setComponentValue","error","console","index","prevState","imageBytes","Uint8Array","from","atob","c","charCodeAt","embeddedImage","embedPng","pageWidthInPoints","pageHeightInPoints","scale","scaledWidth","scaledHeight","xOffset","yOffset","widthRatio","heightRatio","Math","margin","contentWidth","contentHeight","min","page","addPage","drawImage","x","y","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild"],"sources":["C:/Users/lukeb/Downloads/my_component/pdf_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\n\ninterface State {\n  isProcessing: boolean;\n  totalPages: number;\n  processedPages: number;\n}\n\nclass PDFComponent extends StreamlitComponentBase<State> {\n  private lastProcessedImageList: string | null = null;\n  private lastProcessedSingleImage: string | null = null;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      isProcessing: false,\n      totalPages: 0,\n      processedPages: 0,\n    };\n  }\n\n  public render = (): ReactNode => {\n    const imageData = this.props.args[\"imageData\"] as string; // For single image\n    const fileName = this.props.args[\"fileName\"] || \"output.pdf\"; // Single image file name\n    const imageList = this.props.args[\"imageList\"] as Array<{ imageData: string; fileName: string }>;\n    const dpi = this.props.args[\"dpi\"] || 300;\n    const pageSize = this.props.args[\"pageSize\"] || { width: 8.5, height: 11 };\n    const bleed = this.props.args[\"bleed\"] || false;\n\n    // Start processing only if not already processing\n    if (!this.state.isProcessing) {\n      if (imageData) {\n        if (imageData !== this.lastProcessedSingleImage) {\n          this.lastProcessedSingleImage = imageData;\n          this.setState({ isProcessing: true, totalPages: 1, processedPages: 0 }, () => {\n            this.convertSingleImageToPdf(imageData, fileName, dpi, pageSize, bleed);\n          });\n        }\n      } else if (imageList && imageList.length > 0) {\n        const serializedImageList = JSON.stringify(imageList);\n        if (serializedImageList !== this.lastProcessedImageList) {\n          this.lastProcessedImageList = serializedImageList;\n          this.setState(\n            { isProcessing: true, totalPages: imageList.length, processedPages: 0 },\n            () => {\n              this.convertImagesToSinglePdf(imageList, dpi, pageSize, bleed);\n            }\n          );\n        }\n      }\n    }\n\n    // Render the progress bar and message if processing\n    return (\n      <div>\n        {this.state.isProcessing && (\n          <>\n            <progress\n              value={this.state.processedPages}\n              max={this.state.totalPages}\n              style={{ width: \"100%\" }}\n            ></progress>\n            <p>\n              Currently processing page {this.state.processedPages} of {this.state.totalPages}\n            </p>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  private convertSingleImageToPdf = async (\n    imageData: string,\n    fileName: string,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean\n  ): Promise<void> => {\n    try {\n      const pdfDoc = await PDFDocument.create();\n      await this.addImageToPdf(pdfDoc, imageData, dpi, pageSize, bleed);\n\n      this.setState({ processedPages: 1 }); // Update progress\n\n      const pdfBytes = await pdfDoc.save();\n      this.triggerDownload(pdfBytes, fileName);\n\n      Streamlit.setComponentValue(true); // Indicate success\n    } catch (error) {\n      console.error(\"Error generating single PDF:\", error);\n      Streamlit.setComponentValue(false); // Indicate failure\n    } finally {\n      this.setState({ isProcessing: false }); // Reset processing flag\n    }\n  };\n\n  private convertImagesToSinglePdf = async (\n    imageList: Array<{ imageData: string; fileName: string }>,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean\n  ): Promise<void> => {\n    try {\n      const pdfDoc = await PDFDocument.create();\n\n      for (let index = 0; index < imageList.length; index++) {\n        const { imageData } = imageList[index];\n        await this.addImageToPdf(pdfDoc, imageData, dpi, pageSize, bleed);\n\n        // Update progress\n        this.setState((prevState) => ({\n          processedPages: prevState.processedPages + 1,\n        }));\n      }\n\n      const pdfBytes = await pdfDoc.save();\n      const fileName = this.props.args[\"outputFileName\"] || \"bulk_images.pdf\";\n      this.triggerDownload(pdfBytes, fileName);\n\n      Streamlit.setComponentValue(true); // Indicate success\n    } catch (error) {\n      console.error(\"Error generating bulk PDF:\", error);\n      Streamlit.setComponentValue(false); // Indicate failure\n    } finally {\n      this.setState({ isProcessing: false }); // Reset processing flag\n    }\n  };\n\n  private addImageToPdf = async (\n    pdfDoc: PDFDocument,\n    imageData: string,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean\n  ): Promise<void> => {\n    const imageBytes = Uint8Array.from(atob(imageData), (c) => c.charCodeAt(0));\n    const embeddedImage = await pdfDoc.embedPng(imageBytes);\n\n    const pageWidthInPoints = pageSize.width * 72;\n    const pageHeightInPoints = pageSize.height * 72;\n\n    let scale, scaledWidth, scaledHeight, xOffset, yOffset;\n\n    if (bleed) {\n      const widthRatio = pageWidthInPoints / embeddedImage.width;\n      const heightRatio = pageHeightInPoints / embeddedImage.height;\n      scale = Math.max(widthRatio, heightRatio);\n      scaledWidth = embeddedImage.width * scale;\n      scaledHeight = embeddedImage.height * scale;\n      xOffset = (pageWidthInPoints - scaledWidth) / 2;\n      yOffset = (pageHeightInPoints - scaledHeight) / 2;\n    } else {\n      const margin = 0.75 * 72;\n      const contentWidth = pageWidthInPoints - 2 * margin;\n      const contentHeight = pageHeightInPoints - 2 * margin;\n\n      const widthRatio = contentWidth / embeddedImage.width;\n      const heightRatio = contentHeight / embeddedImage.height;\n      scale = Math.min(widthRatio, heightRatio);\n      scaledWidth = embeddedImage.width * scale;\n      scaledHeight = embeddedImage.height * scale;\n      xOffset = (contentWidth - scaledWidth) / 2 + margin;\n      yOffset = (contentHeight - scaledHeight) / 2 + margin;\n    }\n\n    const page = pdfDoc.addPage([pageWidthInPoints, pageHeightInPoints]);\n    page.drawImage(embeddedImage, {\n      x: xOffset,\n      y: yOffset,\n      width: scaledWidth,\n      height: scaledHeight,\n    });\n  };\n\n  private triggerDownload = (pdfBytes: Uint8Array, fileName: string): void => {\n    const blob = new Blob([pdfBytes], { type: \"application/pdf\" });\n    const url = URL.createObjectURL(blob);\n\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = fileName;\n    document.body.appendChild(link);\n\n    link.click();\n    document.body.removeChild(link);\n  };\n}\n\nexport default withStreamlitConnection(PDFComponent);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}