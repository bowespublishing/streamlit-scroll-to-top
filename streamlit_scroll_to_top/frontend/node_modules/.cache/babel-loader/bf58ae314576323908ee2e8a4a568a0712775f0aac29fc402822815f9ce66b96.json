{"ast":null,"code":"import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import{PDFDocument}from\"pdf-lib\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";class PDFComponent extends StreamlitComponentBase{constructor(){super(...arguments);this.isProcessing=false;// Guard to prevent double execution\nthis.pdfDoc=null;// Holds the PDF document for incremental updates\nthis.fileName=\"bulk_images.pdf\";// Default output file name\nthis.totalImages=0;// Total images to process\nthis.processedImages=0;// Counter for processed images\nthis.render=()=>{const imageData=this.props.args[\"imageData\"];// For single image\nconst fileName=this.props.args[\"fileName\"]||\"output.pdf\";// Single image file name\nconst imageList=this.props.args[\"imageList\"];const dpi=this.props.args[\"dpi\"]||300;const pageSize=this.props.args[\"pageSize\"]||{width:8.5,height:11};const bleed=this.props.args[\"bleed\"]||false;if(!this.isProcessing){if(imageData){this.isProcessing=true;this.convertSingleImageToPdf(imageData,fileName,dpi,pageSize,bleed);}else if(imageList&&imageList.length>0){this.isProcessing=true;this.totalImages=imageList.length;this.processedImages=0;this.fileName=this.props.args[\"outputFileName\"]||\"bulk_images.pdf\";this.convertImagesToSinglePdf(imageList,dpi,pageSize,bleed);}}return/*#__PURE__*/_jsx(\"div\",{children:this.isProcessing&&this.totalImages>0&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"progress\",{value:this.processedImages,max:this.totalImages,style:{width:\"100%\"}}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Processing image \",this.processedImages,\" of \",this.totalImages]})]})});};this.convertSingleImageToPdf=async(imageData,fileName,dpi,pageSize,bleed)=>{try{const pdfDoc=await PDFDocument.create();await this.addImageToPdf(pdfDoc,imageData,dpi,pageSize,bleed);const pdfBytes=await pdfDoc.save();this.triggerDownload(pdfBytes,fileName);Streamlit.setComponentValue(true);// Indicate success\n}catch(error){console.error(\"Error generating single PDF:\",error);Streamlit.setComponentValue(false);// Indicate failure\n}finally{this.isProcessing=false;// Reset guard\n}};this.convertImagesToSinglePdf=async(imageList,dpi,pageSize,bleed)=>{try{this.pdfDoc=await PDFDocument.create();// Process images one by one\nfor(let i=0;i<imageList.length;i++){const{imageData}=imageList[i];await this.addImageToPdf(this.pdfDoc,imageData,dpi,pageSize,bleed);// Update progress\nthis.processedImages=i+1;Streamlit.setComponentValue({progress:this.processedImages,total:this.totalImages});this.forceUpdate();// Trigger UI update\n}// Save and download the final PDF\nconst pdfBytes=await this.pdfDoc.save();this.triggerDownload(pdfBytes,this.fileName);Streamlit.setComponentValue(true);// Indicate success\n}catch(error){console.error(\"Error generating bulk PDF:\",error);Streamlit.setComponentValue(false);// Indicate failure\n}finally{this.isProcessing=false;// Reset guard\nthis.pdfDoc=null;// Reset PDF document\n}};this.addImageToPdf=async(pdfDoc,imageData,dpi,pageSize,bleed)=>{const imageBytes=Uint8Array.from(atob(imageData),c=>c.charCodeAt(0));const embeddedImage=await pdfDoc.embedPng(imageBytes);const pageWidthInPoints=pageSize.width*72;const pageHeightInPoints=pageSize.height*72;let scale,scaledWidth,scaledHeight,xOffset,yOffset;if(bleed){const widthRatio=pageWidthInPoints/embeddedImage.width;const heightRatio=pageHeightInPoints/embeddedImage.height;scale=Math.max(widthRatio,heightRatio);scaledWidth=embeddedImage.width*scale;scaledHeight=embeddedImage.height*scale;xOffset=(pageWidthInPoints-scaledWidth)/2;yOffset=(pageHeightInPoints-scaledHeight)/2;}else{const margin=0.75*72;const contentWidth=pageWidthInPoints-2*margin;const contentHeight=pageHeightInPoints-2*margin;const widthRatio=contentWidth/embeddedImage.width;const heightRatio=contentHeight/embeddedImage.height;scale=Math.min(widthRatio,heightRatio);scaledWidth=embeddedImage.width*scale;scaledHeight=embeddedImage.height*scale;xOffset=(contentWidth-scaledWidth)/2+margin;yOffset=(contentHeight-scaledHeight)/2+margin;}const page=pdfDoc.addPage([pageWidthInPoints,pageHeightInPoints]);page.drawImage(embeddedImage,{x:xOffset,y:yOffset,width:scaledWidth,height:scaledHeight});};this.triggerDownload=(pdfBytes,fileName)=>{const blob=new Blob([pdfBytes],{type:\"application/pdf\"});const url=URL.createObjectURL(blob);const link=document.createElement(\"a\");link.href=url;link.download=fileName;document.body.appendChild(link);link.click();document.body.removeChild(link);};}}export default withStreamlitConnection(PDFComponent);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","PDFDocument","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PDFComponent","constructor","arguments","isProcessing","pdfDoc","fileName","totalImages","processedImages","render","imageData","props","args","imageList","dpi","pageSize","width","height","bleed","convertSingleImageToPdf","length","convertImagesToSinglePdf","children","value","max","style","create","addImageToPdf","pdfBytes","save","triggerDownload","setComponentValue","error","console","i","progress","total","forceUpdate","imageBytes","Uint8Array","from","atob","c","charCodeAt","embeddedImage","embedPng","pageWidthInPoints","pageHeightInPoints","scale","scaledWidth","scaledHeight","xOffset","yOffset","widthRatio","heightRatio","Math","margin","contentWidth","contentHeight","min","page","addPage","drawImage","x","y","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild"],"sources":["C:/Users/lukeb/Downloads/my_component/pdf_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\n\nclass PDFComponent extends StreamlitComponentBase {\n  private isProcessing: boolean = false; // Guard to prevent double execution\n  private pdfDoc: PDFDocument | null = null; // Holds the PDF document for incremental updates\n  private fileName: string = \"bulk_images.pdf\"; // Default output file name\n  private totalImages: number = 0; // Total images to process\n  private processedImages: number = 0; // Counter for processed images\n\n  public render = (): ReactNode => {\n    const imageData = this.props.args[\"imageData\"] as string; // For single image\n    const fileName = this.props.args[\"fileName\"] || \"output.pdf\"; // Single image file name\n    const imageList = this.props.args[\"imageList\"] as Array<{ imageData: string; fileName: string }>;\n    const dpi = this.props.args[\"dpi\"] || 300;\n    const pageSize = this.props.args[\"pageSize\"] || { width: 8.5, height: 11 };\n    const bleed = this.props.args[\"bleed\"] || false;\n\n    if (!this.isProcessing) {\n      if (imageData) {\n        this.isProcessing = true;\n        this.convertSingleImageToPdf(imageData, fileName, dpi, pageSize, bleed);\n      } else if (imageList && imageList.length > 0) {\n        this.isProcessing = true;\n        this.totalImages = imageList.length;\n        this.processedImages = 0;\n        this.fileName = this.props.args[\"outputFileName\"] || \"bulk_images.pdf\";\n        this.convertImagesToSinglePdf(imageList, dpi, pageSize, bleed);\n      }\n    }\n\n    return (\n      <div>\n        {this.isProcessing && this.totalImages > 0 && (\n          <>\n            <progress\n              value={this.processedImages}\n              max={this.totalImages}\n              style={{ width: \"100%\" }}\n            ></progress>\n            <p>\n              Processing image {this.processedImages} of {this.totalImages}\n            </p>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  private convertSingleImageToPdf = async (\n    imageData: string,\n    fileName: string,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean\n  ): Promise<void> => {\n    try {\n      const pdfDoc = await PDFDocument.create();\n      await this.addImageToPdf(pdfDoc, imageData, dpi, pageSize, bleed);\n\n      const pdfBytes = await pdfDoc.save();\n      this.triggerDownload(pdfBytes, fileName);\n\n      Streamlit.setComponentValue(true); // Indicate success\n    } catch (error) {\n      console.error(\"Error generating single PDF:\", error);\n      Streamlit.setComponentValue(false); // Indicate failure\n    } finally {\n      this.isProcessing = false; // Reset guard\n    }\n  };\n\n  private convertImagesToSinglePdf = async (\n    imageList: Array<{ imageData: string; fileName: string }>,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean\n  ): Promise<void> => {\n    try {\n      this.pdfDoc = await PDFDocument.create();\n\n      // Process images one by one\n      for (let i = 0; i < imageList.length; i++) {\n        const { imageData } = imageList[i];\n        await this.addImageToPdf(this.pdfDoc, imageData, dpi, pageSize, bleed);\n\n        // Update progress\n        this.processedImages = i + 1;\n        Streamlit.setComponentValue({ progress: this.processedImages, total: this.totalImages });\n        this.forceUpdate(); // Trigger UI update\n      }\n\n      // Save and download the final PDF\n      const pdfBytes = await this.pdfDoc.save();\n      this.triggerDownload(pdfBytes, this.fileName);\n\n      Streamlit.setComponentValue(true); // Indicate success\n    } catch (error) {\n      console.error(\"Error generating bulk PDF:\", error);\n      Streamlit.setComponentValue(false); // Indicate failure\n    } finally {\n      this.isProcessing = false; // Reset guard\n      this.pdfDoc = null; // Reset PDF document\n    }\n  };\n\n  private addImageToPdf = async (\n    pdfDoc: PDFDocument,\n    imageData: string,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean\n  ): Promise<void> => {\n    const imageBytes = Uint8Array.from(atob(imageData), (c) => c.charCodeAt(0));\n    const embeddedImage = await pdfDoc.embedPng(imageBytes);\n\n    const pageWidthInPoints = pageSize.width * 72;\n    const pageHeightInPoints = pageSize.height * 72;\n\n    let scale, scaledWidth, scaledHeight, xOffset, yOffset;\n\n    if (bleed) {\n      const widthRatio = pageWidthInPoints / embeddedImage.width;\n      const heightRatio = pageHeightInPoints / embeddedImage.height;\n      scale = Math.max(widthRatio, heightRatio);\n      scaledWidth = embeddedImage.width * scale;\n      scaledHeight = embeddedImage.height * scale;\n      xOffset = (pageWidthInPoints - scaledWidth) / 2;\n      yOffset = (pageHeightInPoints - scaledHeight) / 2;\n    } else {\n      const margin = 0.75 * 72;\n      const contentWidth = pageWidthInPoints - 2 * margin;\n      const contentHeight = pageHeightInPoints - 2 * margin;\n\n      const widthRatio = contentWidth / embeddedImage.width;\n      const heightRatio = contentHeight / embeddedImage.height;\n      scale = Math.min(widthRatio, heightRatio);\n      scaledWidth = embeddedImage.width * scale;\n      scaledHeight = embeddedImage.height * scale;\n      xOffset = (contentWidth - scaledWidth) / 2 + margin;\n      yOffset = (contentHeight - scaledHeight) / 2 + margin;\n    }\n\n    const page = pdfDoc.addPage([pageWidthInPoints, pageHeightInPoints]);\n    page.drawImage(embeddedImage, {\n      x: xOffset,\n      y: yOffset,\n      width: scaledWidth,\n      height: scaledHeight,\n    });\n  };\n\n  private triggerDownload = (pdfBytes: Uint8Array, fileName: string): void => {\n    const blob = new Blob([pdfBytes], { type: \"application/pdf\" });\n    const url = URL.createObjectURL(blob);\n\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = fileName;\n    document.body.appendChild(link);\n\n    link.click();\n    document.body.removeChild(link);\n  };\n}\n\nexport default withStreamlitConnection(PDFComponent);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}