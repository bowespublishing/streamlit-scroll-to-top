{"ast":null,"code":"import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import{PDFDocument}from\"pdf-lib\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";class PDFComponent extends StreamlitComponentBase{constructor(props){super(props);this.lastProcessedImageList=null;this.lastProcessedSingleImage=null;this.render=()=>{const args=this.props.args;const imageData=args.imageData;const fileName=args.fileName||\"output.pdf\";const imageList=args.imageList;const dpi=args.dpi||300;const pageSize=args.pageSize||{width:8.5,height:11};const bleed=args.bleed||false;const insertBlankPages=args.insertBlankPages||false;const margin=args.margin||0.75;// Default 0.75 inches\nconst gutterMargin=args.gutterMargin||0.0;// Default 0.0 inches\nif(!this.state.isProcessing){if(imageData){if(imageData!==this.lastProcessedSingleImage){this.lastProcessedSingleImage=imageData;this.setState({isProcessing:true,totalPages:1,processedPages:0},()=>{this.convertSingleImageToPdf(imageData,fileName,dpi,pageSize,bleed,margin,gutterMargin,0);});}}else if(imageList&&imageList.length>0){const serializedImageList=JSON.stringify(imageList);if(serializedImageList!==this.lastProcessedImageList){this.lastProcessedImageList=serializedImageList;this.setState({isProcessing:true,totalPages:imageList.length,processedPages:0},()=>{this.convertImagesToSinglePdf(imageList,dpi,pageSize,bleed,insertBlankPages,margin,gutterMargin);});}}}return/*#__PURE__*/_jsx(\"div\",{children:this.state.isProcessing&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"progress\",{value:this.state.processedPages,max:this.state.totalPages,style:{width:\"100%\"}}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Currently processing page \",this.state.processedPages,\" of \",this.state.totalPages]})]})});};this.convertSingleImageToPdf=async(imageData,fileName,dpi,pageSize,bleed,margin,gutterMargin,pageIndex)=>{try{const pdfDoc=await PDFDocument.create();await this.addImageToPdf(pdfDoc,imageData,dpi,pageSize,bleed,margin,gutterMargin,pageIndex);this.setState({processedPages:1});const pdfBytes=await pdfDoc.save();this.triggerDownload(pdfBytes,fileName);Streamlit.setComponentValue(true);}catch(error){console.error(\"Error generating single PDF:\",error);Streamlit.setComponentValue(false);}finally{this.setState({isProcessing:false});}};this.convertImagesToSinglePdf=(imageList,dpi,pageSize,bleed,insertBlankPages,margin,gutterMargin)=>{const pdfDocPromise=PDFDocument.create();const processNextImage=index=>{if(index>=imageList.length){pdfDocPromise.then(async pdfDoc=>{const pdfBytes=await pdfDoc.save();const fileName=this.props.args.outputFileName||\"bulk_images.pdf\";this.triggerDownload(pdfBytes,fileName);this.setState({isProcessing:false});Streamlit.setComponentValue(true);});return;}pdfDocPromise.then(async pdfDoc=>{const{imageData}=imageList[index];await this.addImageToPdf(pdfDoc,imageData,dpi,pageSize,bleed,margin,gutterMargin,index);if(insertBlankPages&&index<imageList.length-1){pdfDoc.addPage([pageSize.width*72,pageSize.height*72]);}this.setState(prevState=>({processedPages:prevState.processedPages+1}));setTimeout(()=>processNextImage(index+1),0);});};processNextImage(0);};this.addImageToPdf=async(pdfDoc,imageData,dpi,pageSize,bleed,margin,gutterMargin,pageIndex)=>{const imageBytes=Uint8Array.from(atob(imageData),c=>c.charCodeAt(0));const embeddedImage=await pdfDoc.embedPng(imageBytes);const pageWidthInPoints=pageSize.width*72;const pageHeightInPoints=pageSize.height*72;const adjustedMargin=margin*72;// Convert inches to points\nconst effectivePageWidth=pageWidthInPoints-2*adjustedMargin;const effectivePageHeight=pageHeightInPoints-2*adjustedMargin;const gutterAdjustment=pageIndex%2===0?gutterMargin*72/2// Even page: adjust right\n:-gutterMargin*72/2;// Odd page: adjust left\nconst widthRatio=effectivePageWidth/embeddedImage.width;const heightRatio=effectivePageHeight/embeddedImage.height;const scale=Math.min(widthRatio,heightRatio);const scaledWidth=embeddedImage.width*scale;const scaledHeight=embeddedImage.height*scale;const xOffset=(effectivePageWidth-scaledWidth)/2+adjustedMargin+gutterAdjustment;const yOffset=(effectivePageHeight-scaledHeight)/2+adjustedMargin;const page=pdfDoc.addPage([pageWidthInPoints,pageHeightInPoints]);page.drawImage(embeddedImage,{x:xOffset,y:yOffset,width:scaledWidth,height:scaledHeight});};this.triggerDownload=(pdfBytes,fileName)=>{const blob=new Blob([pdfBytes],{type:\"application/pdf\"});const url=URL.createObjectURL(blob);const link=document.createElement(\"a\");link.href=url;link.download=fileName;document.body.appendChild(link);link.click();document.body.removeChild(link);};this.state={isProcessing:false,totalPages:0,processedPages:0};}}export default withStreamlitConnection(PDFComponent);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","PDFDocument","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PDFComponent","constructor","props","lastProcessedImageList","lastProcessedSingleImage","render","args","imageData","fileName","imageList","dpi","pageSize","width","height","bleed","insertBlankPages","margin","gutterMargin","state","isProcessing","setState","totalPages","processedPages","convertSingleImageToPdf","length","serializedImageList","JSON","stringify","convertImagesToSinglePdf","children","value","max","style","pageIndex","pdfDoc","create","addImageToPdf","pdfBytes","save","triggerDownload","setComponentValue","error","console","pdfDocPromise","processNextImage","index","then","outputFileName","addPage","prevState","setTimeout","imageBytes","Uint8Array","from","atob","c","charCodeAt","embeddedImage","embedPng","pageWidthInPoints","pageHeightInPoints","adjustedMargin","effectivePageWidth","effectivePageHeight","gutterAdjustment","widthRatio","heightRatio","scale","Math","min","scaledWidth","scaledHeight","xOffset","yOffset","page","drawImage","x","y","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild"],"sources":["C:/Users/lukeb/Downloads/my_component/pdf_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\n\ninterface State {\n  isProcessing: boolean;\n  totalPages: number;\n  processedPages: number;\n}\n\ninterface Args {\n  imageData?: string;\n  imageList?: Array<{ imageData: string; fileName: string }>;\n  fileName?: string;\n  dpi?: number;\n  pageSize?: { width: number; height: number };\n  bleed?: boolean;\n  outputFileName?: string;\n  insertBlankPages?: boolean; // Option to insert blank pages\n  margin?: number; // Minimum margin around the content\n  gutterMargin?: number; // Gutter margin for odd/even pages\n}\n\nclass PDFComponent extends StreamlitComponentBase<State> {\n  private lastProcessedImageList: string | null = null;\n  private lastProcessedSingleImage: string | null = null;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      isProcessing: false,\n      totalPages: 0,\n      processedPages: 0,\n    };\n  }\n\n  public render = (): ReactNode => {\n    const args = this.props.args as Args;\n    const imageData = args.imageData;\n    const fileName = args.fileName || \"output.pdf\";\n    const imageList = args.imageList;\n    const dpi = args.dpi || 300;\n    const pageSize = args.pageSize || { width: 8.5, height: 11 };\n    const bleed = args.bleed || false;\n    const insertBlankPages = args.insertBlankPages || false;\n    const margin = args.margin || 0.75; // Default 0.75 inches\n    const gutterMargin = args.gutterMargin || 0.0; // Default 0.0 inches\n\n    if (!this.state.isProcessing) {\n      if (imageData) {\n        if (imageData !== this.lastProcessedSingleImage) {\n          this.lastProcessedSingleImage = imageData;\n          this.setState({ isProcessing: true, totalPages: 1, processedPages: 0 }, () => {\n            this.convertSingleImageToPdf(imageData, fileName, dpi, pageSize, bleed, margin, gutterMargin, 0);\n          });\n        }\n      } else if (imageList && imageList.length > 0) {\n        const serializedImageList = JSON.stringify(imageList);\n        if (serializedImageList !== this.lastProcessedImageList) {\n          this.lastProcessedImageList = serializedImageList;\n          this.setState(\n            { isProcessing: true, totalPages: imageList.length, processedPages: 0 },\n            () => {\n              this.convertImagesToSinglePdf(imageList, dpi, pageSize, bleed, insertBlankPages, margin, gutterMargin);\n            }\n          );\n        }\n      }\n    }\n\n    return (\n      <div>\n        {this.state.isProcessing && (\n          <>\n            <progress\n              value={this.state.processedPages}\n              max={this.state.totalPages}\n              style={{ width: \"100%\" }}\n            ></progress>\n            <p>\n              Currently processing page {this.state.processedPages} of {this.state.totalPages}\n            </p>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  private convertSingleImageToPdf = async (\n    imageData: string,\n    fileName: string,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean,\n    margin: number,\n    gutterMargin: number,\n    pageIndex: number\n  ): Promise<void> => {\n    try {\n      const pdfDoc = await PDFDocument.create();\n      await this.addImageToPdf(pdfDoc, imageData, dpi, pageSize, bleed, margin, gutterMargin, pageIndex);\n      this.setState({ processedPages: 1 });\n      const pdfBytes = await pdfDoc.save();\n      this.triggerDownload(pdfBytes, fileName);\n      Streamlit.setComponentValue(true);\n    } catch (error) {\n      console.error(\"Error generating single PDF:\", error);\n      Streamlit.setComponentValue(false);\n    } finally {\n      this.setState({ isProcessing: false });\n    }\n  };\n\n  private convertImagesToSinglePdf = (\n    imageList: Array<{ imageData: string; fileName: string }>,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean,\n    insertBlankPages: boolean,\n    margin: number,\n    gutterMargin: number\n  ): void => {\n    const pdfDocPromise = PDFDocument.create();\n\n    const processNextImage = (index: number): void => {\n      if (index >= imageList.length) {\n        pdfDocPromise.then(async (pdfDoc) => {\n          const pdfBytes = await pdfDoc.save();\n          const fileName = (this.props.args as Args).outputFileName || \"bulk_images.pdf\";\n          this.triggerDownload(pdfBytes, fileName);\n          this.setState({ isProcessing: false });\n          Streamlit.setComponentValue(true);\n        });\n        return;\n      }\n\n      pdfDocPromise.then(async (pdfDoc) => {\n        const { imageData } = imageList[index];\n        await this.addImageToPdf(pdfDoc, imageData, dpi, pageSize, bleed, margin, gutterMargin, index);\n\n        if (insertBlankPages && index < imageList.length - 1) {\n          pdfDoc.addPage([pageSize.width * 72, pageSize.height * 72]);\n        }\n\n        this.setState((prevState) => ({\n          processedPages: prevState.processedPages + 1,\n        }));\n\n        setTimeout(() => processNextImage(index + 1), 0);\n      });\n    };\n\n    processNextImage(0);\n  };\n\n  private addImageToPdf = async (\n    pdfDoc: PDFDocument,\n    imageData: string,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean,\n    margin: number,\n    gutterMargin: number,\n    pageIndex: number\n  ): Promise<void> => {\n    const imageBytes = Uint8Array.from(atob(imageData), (c) => c.charCodeAt(0));\n    const embeddedImage = await pdfDoc.embedPng(imageBytes);\n\n    const pageWidthInPoints = pageSize.width * 72;\n    const pageHeightInPoints = pageSize.height * 72;\n\n    const adjustedMargin = margin * 72; // Convert inches to points\n    const effectivePageWidth = pageWidthInPoints - 2 * adjustedMargin;\n    const effectivePageHeight = pageHeightInPoints - 2 * adjustedMargin;\n\n    const gutterAdjustment = pageIndex % 2 === 0\n      ? gutterMargin * 72 / 2 // Even page: adjust right\n      : -gutterMargin * 72 / 2; // Odd page: adjust left\n\n    const widthRatio = effectivePageWidth / embeddedImage.width;\n    const heightRatio = effectivePageHeight / embeddedImage.height;\n    const scale = Math.min(widthRatio, heightRatio);\n\n    const scaledWidth = embeddedImage.width * scale;\n    const scaledHeight = embeddedImage.height * scale;\n\n    const xOffset = (effectivePageWidth - scaledWidth) / 2 + adjustedMargin + gutterAdjustment;\n    const yOffset = (effectivePageHeight - scaledHeight) / 2 + adjustedMargin;\n\n    const page = pdfDoc.addPage([pageWidthInPoints, pageHeightInPoints]);\n    page.drawImage(embeddedImage, {\n      x: xOffset,\n      y: yOffset,\n      width: scaledWidth,\n      height: scaledHeight,\n    });\n  };\n\n  private triggerDownload = (pdfBytes: Uint8Array, fileName: string): void => {\n    const blob = new Blob([pdfBytes], { type: \"application/pdf\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = fileName;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n}\n\nexport default withStreamlitConnection(PDFComponent);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}