{"ast":null,"code":"import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import{PDFDocument}from\"pdf-lib\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";class PDFComponent extends StreamlitComponentBase{constructor(props){super(props);this.isProcessing=false;// Guard to prevent double execution\nthis.lastProcessedImageList=null;this.lastProcessedSingleImage=null;this.render=()=>{const imageData=this.props.args[\"imageData\"];// For single image\nconst fileName=this.props.args[\"fileName\"]||\"output.pdf\";// Single image file name\nconst imageList=this.props.args[\"imageList\"];const dpi=this.props.args[\"dpi\"]||300;const pageSize=this.props.args[\"pageSize\"]||{width:8.5,height:11};const bleed=this.props.args[\"bleed\"]||false;// Single image handling\nif(imageData&&!this.isProcessing){if(imageData!==this.lastProcessedSingleImage){this.isProcessing=true;this.lastProcessedSingleImage=imageData;this.setState({totalImages:1,processedImages:0});// Single image\nthis.convertSingleImageToPdf(imageData,fileName,dpi,pageSize,bleed);}}// Multi-image handling\nelse if(imageList&&imageList.length>0&&!this.isProcessing){const serializedImageList=JSON.stringify(imageList);// Serialize to detect changes\nif(serializedImageList!==this.lastProcessedImageList){this.isProcessing=true;this.lastProcessedImageList=serializedImageList;this.setState({totalImages:imageList.length,processedImages:0});this.convertImagesToSinglePdf(imageList,dpi,pageSize,bleed);}}// Render the progress bar and message if processing\nreturn/*#__PURE__*/_jsx(\"div\",{children:this.isProcessing&&this.state.totalImages>0&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"progress\",{value:this.state.processedImages,max:this.state.totalImages,style:{width:\"100%\"}}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Processing image \",this.state.processedImages,\" of \",this.state.totalImages]})]})});};this.convertSingleImageToPdf=async(imageData,fileName,dpi,pageSize,bleed)=>{try{const pdfDoc=await PDFDocument.create();await this.addImageToPdf(pdfDoc,imageData,dpi,pageSize,bleed);const pdfBytes=await pdfDoc.save();this.triggerDownload(pdfBytes,fileName);this.setState({processedImages:1});// Update progress for single image\nStreamlit.setComponentValue(true);// Indicate success\n}catch(error){console.error(\"Error generating single PDF:\",error);Streamlit.setComponentValue(false);// Indicate failure\n}finally{this.isProcessing=false;// Reset guard\n}};this.convertImagesToSinglePdf=async(imageList,dpi,pageSize,bleed)=>{try{const pdfDoc=await PDFDocument.create();for(let i=0;i<imageList.length;i++){const{imageData}=imageList[i];await this.addImageToPdf(pdfDoc,imageData,dpi,pageSize,bleed);// Update progress after processing each image\nthis.setState(prevState=>({processedImages:prevState.processedImages+1}));}const pdfBytes=await pdfDoc.save();const fileName=this.props.args[\"outputFileName\"]||\"bulk_images.pdf\";// Trigger the download\nthis.triggerDownload(pdfBytes,fileName);Streamlit.setComponentValue(true);// Indicate success\n}catch(error){console.error(\"Error generating bulk PDF:\",error);Streamlit.setComponentValue(false);// Indicate failure\n}finally{this.isProcessing=false;// Reset guard\n}};this.addImageToPdf=async(pdfDoc,imageData,dpi,pageSize,bleed)=>{const imageBytes=Uint8Array.from(atob(imageData),c=>c.charCodeAt(0));const embeddedImage=await pdfDoc.embedPng(imageBytes);const pageWidthInPoints=pageSize.width*72;const pageHeightInPoints=pageSize.height*72;let scale,scaledWidth,scaledHeight,xOffset,yOffset;if(bleed){const widthRatio=pageWidthInPoints/embeddedImage.width;const heightRatio=pageHeightInPoints/embeddedImage.height;scale=Math.max(widthRatio,heightRatio);scaledWidth=embeddedImage.width*scale;scaledHeight=embeddedImage.height*scale;xOffset=(pageWidthInPoints-scaledWidth)/2;yOffset=(pageHeightInPoints-scaledHeight)/2;}else{const margin=0.75*72;const contentWidth=pageWidthInPoints-2*margin;const contentHeight=pageHeightInPoints-2*margin;const widthRatio=contentWidth/embeddedImage.width;const heightRatio=contentHeight/embeddedImage.height;scale=Math.min(widthRatio,heightRatio);scaledWidth=embeddedImage.width*scale;scaledHeight=embeddedImage.height*scale;xOffset=(contentWidth-scaledWidth)/2+margin;yOffset=(contentHeight-scaledHeight)/2+margin;}const page=pdfDoc.addPage([pageWidthInPoints,pageHeightInPoints]);page.drawImage(embeddedImage,{x:xOffset,y:yOffset,width:scaledWidth,height:scaledHeight});};this.triggerDownload=(pdfBytes,fileName)=>{const blob=new Blob([pdfBytes],{type:\"application/pdf\"});const url=URL.createObjectURL(blob);const link=document.createElement(\"a\");link.href=url;link.download=fileName;document.body.appendChild(link);link.click();document.body.removeChild(link);};this.state={totalImages:0,processedImages:0};}}export default withStreamlitConnection(PDFComponent);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","PDFDocument","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PDFComponent","constructor","props","isProcessing","lastProcessedImageList","lastProcessedSingleImage","render","imageData","args","fileName","imageList","dpi","pageSize","width","height","bleed","setState","totalImages","processedImages","convertSingleImageToPdf","length","serializedImageList","JSON","stringify","convertImagesToSinglePdf","children","state","value","max","style","pdfDoc","create","addImageToPdf","pdfBytes","save","triggerDownload","setComponentValue","error","console","i","prevState","imageBytes","Uint8Array","from","atob","c","charCodeAt","embeddedImage","embedPng","pageWidthInPoints","pageHeightInPoints","scale","scaledWidth","scaledHeight","xOffset","yOffset","widthRatio","heightRatio","Math","margin","contentWidth","contentHeight","min","page","addPage","drawImage","x","y","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild"],"sources":["C:/Users/lukeb/Downloads/my_component/pdf_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\n\ninterface State {\n  totalImages: number;\n  processedImages: number;\n}\n\nclass PDFComponent extends StreamlitComponentBase<{}, State> {\n  private isProcessing: boolean = false; // Guard to prevent double execution\n  private lastProcessedImageList: string | null = null;\n  private lastProcessedSingleImage: string | null = null;\n\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      totalImages: 0,\n      processedImages: 0,\n    };\n  }\n\n  public render = (): ReactNode => {\n    const imageData = this.props.args[\"imageData\"] as string; // For single image\n    const fileName = this.props.args[\"fileName\"] || \"output.pdf\"; // Single image file name\n    const imageList = this.props.args[\"imageList\"] as Array<{ imageData: string; fileName: string }>;\n    const dpi = this.props.args[\"dpi\"] || 300;\n    const pageSize = this.props.args[\"pageSize\"] || { width: 8.5, height: 11 };\n    const bleed = this.props.args[\"bleed\"] || false;\n\n    // Single image handling\n    if (imageData && !this.isProcessing) {\n      if (imageData !== this.lastProcessedSingleImage) {\n        this.isProcessing = true;\n        this.lastProcessedSingleImage = imageData;\n        this.setState({ totalImages: 1, processedImages: 0 }); // Single image\n        this.convertSingleImageToPdf(imageData, fileName, dpi, pageSize, bleed);\n      }\n    }\n    // Multi-image handling\n    else if (imageList && imageList.length > 0 && !this.isProcessing) {\n      const serializedImageList = JSON.stringify(imageList); // Serialize to detect changes\n      if (serializedImageList !== this.lastProcessedImageList) {\n        this.isProcessing = true;\n        this.lastProcessedImageList = serializedImageList;\n        this.setState({ totalImages: imageList.length, processedImages: 0 });\n        this.convertImagesToSinglePdf(imageList, dpi, pageSize, bleed);\n      }\n    }\n\n    // Render the progress bar and message if processing\n    return (\n      <div>\n        {this.isProcessing && this.state.totalImages > 0 && (\n          <>\n            <progress\n              value={this.state.processedImages}\n              max={this.state.totalImages}\n              style={{ width: \"100%\" }}\n            ></progress>\n            <p>\n              Processing image {this.state.processedImages} of {this.state.totalImages}\n            </p>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  private convertSingleImageToPdf = async (\n    imageData: string,\n    fileName: string,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean\n  ): Promise<void> => {\n    try {\n      const pdfDoc = await PDFDocument.create();\n      await this.addImageToPdf(pdfDoc, imageData, dpi, pageSize, bleed);\n\n      const pdfBytes = await pdfDoc.save();\n      this.triggerDownload(pdfBytes, fileName);\n\n      this.setState({ processedImages: 1 }); // Update progress for single image\n      Streamlit.setComponentValue(true); // Indicate success\n    } catch (error) {\n      console.error(\"Error generating single PDF:\", error);\n      Streamlit.setComponentValue(false); // Indicate failure\n    } finally {\n      this.isProcessing = false; // Reset guard\n    }\n  };\n\n  private convertImagesToSinglePdf = async (\n    imageList: Array<{ imageData: string; fileName: string }>,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean\n  ): Promise<void> => {\n    try {\n      const pdfDoc = await PDFDocument.create();\n\n      for (let i = 0; i < imageList.length; i++) {\n        const { imageData } = imageList[i];\n        await this.addImageToPdf(pdfDoc, imageData, dpi, pageSize, bleed);\n\n        // Update progress after processing each image\n        this.setState((prevState) => ({\n          processedImages: prevState.processedImages + 1,\n        }));\n      }\n\n      const pdfBytes = await pdfDoc.save();\n      const fileName = this.props.args[\"outputFileName\"] || \"bulk_images.pdf\";\n\n      // Trigger the download\n      this.triggerDownload(pdfBytes, fileName);\n\n      Streamlit.setComponentValue(true); // Indicate success\n    } catch (error) {\n      console.error(\"Error generating bulk PDF:\", error);\n      Streamlit.setComponentValue(false); // Indicate failure\n    } finally {\n      this.isProcessing = false; // Reset guard\n    }\n  };\n\n  private addImageToPdf = async (\n    pdfDoc: PDFDocument,\n    imageData: string,\n    dpi: number,\n    pageSize: { width: number; height: number },\n    bleed: boolean\n  ): Promise<void> => {\n    const imageBytes = Uint8Array.from(atob(imageData), (c) => c.charCodeAt(0));\n    const embeddedImage = await pdfDoc.embedPng(imageBytes);\n\n    const pageWidthInPoints = pageSize.width * 72;\n    const pageHeightInPoints = pageSize.height * 72;\n\n    let scale, scaledWidth, scaledHeight, xOffset, yOffset;\n\n    if (bleed) {\n      const widthRatio = pageWidthInPoints / embeddedImage.width;\n      const heightRatio = pageHeightInPoints / embeddedImage.height;\n      scale = Math.max(widthRatio, heightRatio);\n      scaledWidth = embeddedImage.width * scale;\n      scaledHeight = embeddedImage.height * scale;\n      xOffset = (pageWidthInPoints - scaledWidth) / 2;\n      yOffset = (pageHeightInPoints - scaledHeight) / 2;\n    } else {\n      const margin = 0.75 * 72;\n      const contentWidth = pageWidthInPoints - 2 * margin;\n      const contentHeight = pageHeightInPoints - 2 * margin;\n\n      const widthRatio = contentWidth / embeddedImage.width;\n      const heightRatio = contentHeight / embeddedImage.height;\n      scale = Math.min(widthRatio, heightRatio);\n      scaledWidth = embeddedImage.width * scale;\n      scaledHeight = embeddedImage.height * scale;\n      xOffset = (contentWidth - scaledWidth) / 2 + margin;\n      yOffset = (contentHeight - scaledHeight) / 2 + margin;\n    }\n\n    const page = pdfDoc.addPage([pageWidthInPoints, pageHeightInPoints]);\n    page.drawImage(embeddedImage, {\n      x: xOffset,\n      y: yOffset,\n      width: scaledWidth,\n      height: scaledHeight,\n    });\n  };\n\n  private triggerDownload = (pdfBytes: Uint8Array, fileName: string): void => {\n    const blob = new Blob([pdfBytes], { type: \"application/pdf\" });\n    const url = URL.createObjectURL(blob);\n\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = fileName;\n    document.body.appendChild(link);\n\n    link.click();\n    document.body.removeChild(link);\n  };\n}\n\nexport default withStreamlitConnection(PDFComponent);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}